# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'user_interface_v2.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from tokenize import String
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QThread, pyqtSignal, pyqtSlot, Qt
from PyQt5.QtGui import QPixmap
import cv2
import numpy as np
import os, sys
ci_build_and_not_headless = False
try:
    from cv2.version import ci_build, headless
    ci_and_not_headless = ci_build and not headless
except:
    pass
if sys.platform.startswith("linux") and ci_and_not_headless:
    os.environ.pop("QT_QPA_PLATFORM_PLUGIN_PATH")
if sys.platform.startswith("linux") and ci_and_not_headless:
    os.environ.pop("QT_QPA_FONTDIR")
# ========================= #
import rclpy
from std_msgs.msg import String, Int32MultiArray, Float64MultiArray
from cv_bridge import CvBridge, CvBridgeError
from std_srvs.srv import Empty, Trigger
from sensor_msgs.msg import Image
# ========================= #

rclpy.init()

class VideoThread(QThread):
    img_hand_signal = pyqtSignal(np.ndarray)
    img_yolo_signal = pyqtSignal(np.ndarray)
    img_plan_signal = pyqtSignal(np.ndarray)
    img_tm_yolo_signal = pyqtSignal(np.ndarray)
    # cap = cv2.VideoCapture(0)
    node = rclpy.create_node('user_interface_node')
    bridge = CvBridge()
    cmd_publisher = node.create_publisher(String, '/pathplan/command', 1)

    def img_hand_callback(self, data):
        try:
            cv_img = self.bridge.imgmsg_to_cv2(data, "bgr8")
            self.img_hand_signal.emit(cv_img)
        except CvBridgeError as e:
            self.node.get_logger().error('bridge error {e}')

    def img_yolo_callback(self, data):
        try:
            cv_img = self.bridge.imgmsg_to_cv2(data, "bgr8")
            self.img_yolo_signal.emit(cv_img)
        except CvBridgeError as e:
            self.node.get_logger().error('bridge error {e}')

    def img_tm_yolo_callback(self, data):
        try:
            cv_img = self.bridge.imgmsg_to_cv2(data, "bgr8")
            cv_img = cv2.flip(cv_img, 1)
            self.img_tm_yolo_signal.emit(cv_img)
        except CvBridgeError as e:
            self.node.get_logger().error('bridge error {e}')

    def img_plan_callback(self, data):
        try:
            cv_img = self.bridge.imgmsg_to_cv2(data, "bgr8")
            self.img_plan_signal.emit(cv_img)
        except CvBridgeError as e:
            self.node.get_logger().error('bridge error {e}')

    def send_command(self, cmd):
        self.cmd_publisher.publish(String(data=cmd))

    def run(self):
        self.node.create_subscription(Image, '/hand/image', self.img_hand_callback, 1)
        # self.node.create_subscription(Image, '/yolo/image', self.img_yolo_callback, 1)
        self.node.create_subscription(Image, '/yolo/image', self.img_tm_yolo_callback, 1)
        self.node.create_subscription(Image, '/pathplan/image', self.img_plan_callback, 1)
        rclpy.spin(self.node)
        # while True:
        #     ret, cv_img = self.cap.read()
        #     if ret:
        #         self.img_hand_signal.emit(cv_img)
        #         self.img_yolo_signal.emit(cv_img)
        #         self.img_plan_signal.emit(cv_img)
        #         self.img_tm_yolo_signal.emit(cv_img)


class App(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi()

    def setupUi(self):
        self.setObjectName("MainWindow")
        self.resize(1280, 720)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(510, 360, 302, 331))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.handImageLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.handImageLayout.setContentsMargins(0, 0, 0, 0)
        self.handImageLayout.setObjectName("handImageLayout")
        self.handLable = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.handLable.setTextFormat(QtCore.Qt.AutoText)
        self.handLable.setAlignment(QtCore.Qt.AlignCenter)
        self.handLable.setObjectName("handLable")
        self.handImageLayout.addWidget(self.handLable)
        self.handImage = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.handImage.setMinimumSize(QtCore.QSize(300, 300))
        self.handImage.setMaximumSize(QtCore.QSize(300, 300))
        self.handImage.setText("")
        self.handImage.setAlignment(QtCore.Qt.AlignCenter)
        self.handImage.setObjectName("handImage")
        self.handImageLayout.addWidget(self.handImage)
        self.verticalLayoutWidget_3 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(840, 10, 386, 319))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.yoloLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)
        self.yoloLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.yoloLayout.setContentsMargins(0, 0, 0, 0)
        self.yoloLayout.setObjectName("yoloLayout")
        self.yoloLabel = QtWidgets.QLabel(self.verticalLayoutWidget_3)
        self.yoloLabel.setMaximumSize(QtCore.QSize(640, 50))
        self.yoloLabel.setTextFormat(QtCore.Qt.AutoText)
        self.yoloLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.yoloLabel.setObjectName("yoloLabel")
        self.yoloLayout.addWidget(self.yoloLabel)
        self.yoloImage = QtWidgets.QLabel(self.verticalLayoutWidget_3)
        self.yoloImage.setMinimumSize(QtCore.QSize(384, 288))
        self.yoloImage.setMaximumSize(QtCore.QSize(384, 288))
        self.yoloImage.setText("")
        self.yoloImage.setObjectName("yoloImage")
        self.yoloLayout.addWidget(self.yoloImage)
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(200, 260, 302, 431))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.pathplanLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.pathplanLayout.setContentsMargins(0, 0, 0, 0)
        self.pathplanLayout.setObjectName("pathplanLayout")
        self.pathplanLable = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.pathplanLable.setTextFormat(QtCore.Qt.AutoText)
        self.pathplanLable.setAlignment(QtCore.Qt.AlignCenter)
        self.pathplanLable.setObjectName("pathplanLable")
        self.pathplanLayout.addWidget(self.pathplanLable)
        self.pathplanImage = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.pathplanImage.setMinimumSize(QtCore.QSize(300, 400))
        self.pathplanImage.setMaximumSize(QtCore.QSize(300, 400))
        self.pathplanImage.setText("")
        self.pathplanImage.setAlignment(QtCore.Qt.AlignCenter)
        self.pathplanImage.setObjectName("pathplanImage")
        self.pathplanLayout.addWidget(self.pathplanImage)
        self.verticalLayoutWidget_4 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_4.setGeometry(QtCore.QRect(820, 340, 441, 355))
        self.verticalLayoutWidget_4.setObjectName("verticalLayoutWidget_4")
        self.realImageLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_4)
        self.realImageLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.realImageLayout.setContentsMargins(0, 0, 0, 0)
        self.realImageLayout.setObjectName("realImageLayout")
        self.realLabel = QtWidgets.QLabel(self.verticalLayoutWidget_4)
        self.realLabel.setMaximumSize(QtCore.QSize(640, 50))
        self.realLabel.setTextFormat(QtCore.Qt.AutoText)
        self.realLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.realLabel.setObjectName("realLabel")
        self.realImageLayout.addWidget(self.realLabel)
        self.realImage = QtWidgets.QLabel(self.verticalLayoutWidget_4)
        self.realImage.setMinimumSize(QtCore.QSize(432, 324))
        self.realImage.setMaximumSize(QtCore.QSize(432, 324))
        self.realImage.setText("")
        self.realImage.setObjectName("realImage")
        self.realImageLayout.addWidget(self.realImage)
        self.verticalLayoutWidget_5 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_5.setGeometry(QtCore.QRect(20, 260, 161, 461))
        self.verticalLayoutWidget_5.setObjectName("verticalLayoutWidget_5")
        self.panelLayout = QtWidgets.QGridLayout(self.verticalLayoutWidget_5)
        self.panelLayout.setContentsMargins(0, 0, 0, 0)
        self.panelLayout.setObjectName("panelLayout")
        self.stopButton = QtWidgets.QPushButton(self.verticalLayoutWidget_5)
        self.stopButton.setMinimumSize(QtCore.QSize(0, 80))
        self.stopButton.setObjectName("stopButton")
        self.panelLayout.addWidget(self.stopButton, 8, 0, 1, 1)
        self.removeButton = QtWidgets.QPushButton(self.verticalLayoutWidget_5)
        self.removeButton.setMinimumSize(QtCore.QSize(0, 40))
        self.removeButton.setObjectName("removeButton")
        self.panelLayout.addWidget(self.removeButton, 3, 0, 1, 1)
        self.startButton = QtWidgets.QPushButton(self.verticalLayoutWidget_5)
        self.startButton.setMinimumSize(QtCore.QSize(0, 40))
        self.startButton.setObjectName("startButton")
        self.panelLayout.addWidget(self.startButton, 5, 0, 1, 1)
        self.simButton = QtWidgets.QPushButton(self.verticalLayoutWidget_5)
        self.simButton.setMinimumSize(QtCore.QSize(0, 40))
        self.simButton.setObjectName("simButton")
        self.panelLayout.addWidget(self.simButton, 4, 0, 1, 1)
        self.detectButton = QtWidgets.QPushButton(self.verticalLayoutWidget_5)
        self.detectButton.setMinimumSize(QtCore.QSize(0, 40))
        self.detectButton.setObjectName("detectButton")
        self.panelLayout.addWidget(self.detectButton, 1, 0, 1, 1)
        self.verticalLayoutWidget_6 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_6.setGeometry(QtCore.QRect(60, 50, 529, 110))
        self.verticalLayoutWidget_6.setObjectName("verticalLayoutWidget_6")
        self.titleLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_6)
        self.titleLayout.setContentsMargins(0, 0, 0, 0)
        self.titleLayout.setObjectName("titleLayout")
        self.mainTitle = QtWidgets.QLabel(self.verticalLayoutWidget_6)
        self.mainTitle.setObjectName("mainTitle")
        self.titleLayout.addWidget(self.mainTitle)
        self.subTitle = QtWidgets.QLabel(self.verticalLayoutWidget_6)
        self.subTitle.setObjectName("subTitle")
        self.titleLayout.addWidget(self.subTitle)
        self.verticalLayoutWidget_7 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_7.setGeometry(QtCore.QRect(580, 240, 160, 80))
        self.verticalLayoutWidget_7.setObjectName("verticalLayoutWidget_7")
        self.captionLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_7)
        self.captionLayout.setContentsMargins(0, 0, 0, 0)
        self.captionLayout.setObjectName("captionLayout")
        self.captionHole = QtWidgets.QCheckBox(self.verticalLayoutWidget_7)
        self.captionHole.setStyleSheet("QCheckBox::indicator\n"
"{\n"
"background-color : lightgreen;\n"
"}\n"
"QCheckBox::indicator\n"
"{\n"
"width : 20px;\n"
"height : 20px;\n"
"}\n"
"QCheckBox {\n"
"    spacing: 5px;\n"
"    font-size:20px; \n"
"    font-weight: bold;\n"
"}")
        self.captionHole.setIconSize(QtCore.QSize(20, 20))
        self.captionHole.setCheckable(False)
        self.captionHole.setChecked(False)
        self.captionHole.setObjectName("captionHole")
        self.captionLayout.addWidget(self.captionHole)
        self.captionErrorPin = QtWidgets.QCheckBox(self.verticalLayoutWidget_7)
        self.captionErrorPin.setStyleSheet("QCheckBox::indicator\n"
"{\n"
"background-color : red;\n"
"}\n"
"QCheckBox::indicator\n"
"{\n"
"width : 20px;\n"
"height : 20px;\n"
"}\n"
"QCheckBox {\n"
"    spacing: 5px;\n"
"    font-size:20px; \n"
"    font-weight: bold;\n"
"}")
        self.captionErrorPin.setIconSize(QtCore.QSize(20, 20))
        self.captionErrorPin.setCheckable(False)
        self.captionErrorPin.setChecked(False)
        self.captionErrorPin.setObjectName("captionErrorPin")
        self.captionLayout.addWidget(self.captionErrorPin)
        self.captionPin = QtWidgets.QCheckBox(self.verticalLayoutWidget_7)
        self.captionPin.setStyleSheet("QCheckBox::indicator\n"
"{\n"
"background-color : blue;\n"
"}\n"
"QCheckBox::indicator\n"
"{\n"
"width : 20px;\n"
"height : 20px;\n"
"}\n"
"QCheckBox {\n"
"    spacing: 5px;\n"
"    font-size:20px; \n"
"    font-weight: bold;\n"
"}")
        self.captionPin.setIconSize(QtCore.QSize(20, 20))
        self.captionPin.setCheckable(False)
        self.captionPin.setChecked(False)
        self.captionPin.setObjectName("captionPin")
        self.captionLayout.addWidget(self.captionPin)
        self.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(self)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1280, 21))
        self.menubar.setObjectName("menubar")
        self.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

        self.thread = VideoThread()
        self.thread.img_hand_signal.connect(self.update_hand_image)
        self.thread.img_yolo_signal.connect(self.update_yolo_image)
        self.thread.img_plan_signal.connect(self.update_pathplan_image)
        self.thread.img_tm_yolo_signal.connect(self.update_real_image)
        self.thread.start()
        self.thread.send_command("init")

        self.detectButton.clicked.connect(self.on_detect_button_click)
        self.startButton.clicked.connect(self.on_start_button_click)
        self.stopButton.clicked.connect(self.on_stop_button_click)
        self.removeButton.clicked.connect(self.on_remove_button_click)
        self.simButton.clicked.connect(self.on_sim_button_click)

        # self.removeButton.setEnabled(False)
        # self.stopButton.setEnabled(False)
        # self.startButton.setEnabled(False)


    @pyqtSlot(np.ndarray)
    def update_hand_image(self, image):
        self.handImage.setPixmap(self.convert_cv_qt(image, 300, 300))

    @pyqtSlot(np.ndarray)
    def update_pathplan_image(self, image):
        self.pathplanImage.setPixmap(self.convert_cv_qt(image, 300, 400))

    @pyqtSlot(np.ndarray)
    def update_yolo_image(self, image):
        self.yoloImage.setPixmap(self.convert_cv_qt(image, 384, 288))

    @pyqtSlot(np.ndarray)
    def update_real_image(self, image):
        self.realImage.setPixmap(self.convert_cv_qt(image, 432, 324))

    def on_detect_button_click(self):
        self.thread.send_command("detect")
        self.removeButton.setEnabled(True)
        self.stopButton.setEnabled(True)
        self.startButton.setEnabled(True)

    def on_remove_button_click(self):
        self.thread.send_command("remove_ng_pin")
        pass

    def on_stop_button_click(self):
        self.thread.send_command("end")
        pass

    def on_start_button_click(self):
        self.thread.send_command("start")
        pass

    def on_sim_button_click(self):
        if self.simButton.text() == "模擬模式":
            self.thread.send_command("mode_sim")
            self.simButton.setText("手臂模式")
        elif self.simButton.text() == "手臂模式":
            self.thread.send_command("mode_real")
            self.simButton.setText("模擬模式")

    def convert_cv_qt(self, cv_img, width, height, mode=Qt.IgnoreAspectRatio):
        rgb_image = cv2.cvtColor(cv_img, cv2.COLOR_BGR2RGB)
        h, w, ch = rgb_image.shape
        bytes_per_line = ch * w
        convert_to_Qt_format = QtGui.QImage(rgb_image.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)
        p = convert_to_Qt_format.scaled(width, height, mode)
        return QPixmap.fromImage(p)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.handLable.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:14pt; font-weight:600;\">手部偵測</span></p></body></html>"))
        self.yoloLabel.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:14pt; font-weight:600;\">YOLO偵測</span></p></body></html>"))
        self.yoloLabel.hide()
        self.pathplanLable.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:14pt; font-weight:600;\">即時狀態</span></p></body></html>"))
        self.realLabel.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:14pt; font-weight:600;\">YOLO偵測</span></p></body></html>"))
        self.stopButton.setText(_translate("MainWindow", "結束"))
        self.removeButton.setText(_translate("MainWindow", "去除瑕疵品"))
        self.startButton.setText(_translate("MainWindow", "開始協作"))
        self.simButton.setText(_translate("MainWindow", "模擬模式"))
        self.detectButton.setText(_translate("MainWindow", "YOLO檢測"))
        self.mainTitle.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:48pt; font-weight:600;\">ROBOT CAN HELP</span></p></body></html>"))
        self.subTitle.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:16pt;\">人機協作系統操作介面</span></p></body></html>"))
        self.captionHole.setText(_translate("MainWindow", "HOLE"))
        self.captionErrorPin.setText(_translate("MainWindow", "NG PIN"))
        self.captionPin.setText(_translate("MainWindow", "PIN"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ui = App()
    ui.show()
    sys.exit(app.exec_())
